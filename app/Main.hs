{-# LANGUAGE DataKinds           #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE GADTs #-}

module Main where

import           Coordinates
import qualified Data.Text              as T
import           Orphans.Lib_PathPieces ()
import           Web.Spock.Safe
import           GEOS.Serialize (readHex)
import qualified Data.ByteString as S
import qualified Data.ByteString.Char8  as BC
import qualified Numeric
import           GEOS.Types
import           Data.ByteString.Builder


distancePath :: Path '[Double, Double, Double, Double]
distancePath = "distance" <//> var <//> var <//> var <//> var

simple :: S.ByteString -> S.ByteString
simple =
    S.concatMap $ \c -> BC.pack $ pad $ Numeric.showHex c []
  where
    pad [x] = ['0', x]
    pad s = s


main :: IO ()
main = do
    fileSHP <- S.readFile "resources/ne_10m_admin_0_countries.wkb2"
    let bsyteString

    let datar = readHex fileSHP
    -- let datar = readHex bs

    let lsg :: Geometry LineString = withSomeGeometry datar $ \case
          ls@(LineStringGeometry _ _) -> ls
          _ -> error "error"

    print lsg

    runSpock 3000 $ spockT id $ do
        -- | /distance/:lat1/:lng1/:lat2/:lng2
        -- Get the distance between 2 points.
        get distancePath $ \lat1 lng1 lat2 lng2 ->
            text $ T.pack $ show $
              distance (Coordinates lat1 lng1) (Coordinates lat2 lng2)
        get ("test" <//> var) $ \hello ->
            text hello
